{
  "code": "export var METHOD_TYPE;\r\n(function (METHOD_TYPE) {\r\n    METHOD_TYPE[\"JSON\"] = \"json\";\r\n    METHOD_TYPE[\"TEXT\"] = \"text\";\r\n    METHOD_TYPE[\"XML\"] = \"xml\";\r\n    METHOD_TYPE[\"ARRAY_BUFFER\"] = \"arraybuffer\";\r\n})(METHOD_TYPE || (METHOD_TYPE = {}));\r\nexport var RES_TYPE;\r\n(function (RES_TYPE) {\r\n    RES_TYPE[\"POST\"] = \"post\";\r\n    RES_TYPE[\"GET\"] = \"get\";\r\n    RES_TYPE[\"head\"] = \"head\";\r\n})(RES_TYPE || (RES_TYPE = {}));\r\nconst URL = \"\";\r\nconst SessionId = \"\";\r\nconst Success = 0;\r\nexport default class Https extends Laya.HttpRequest {\r\n    constructor() {\r\n        super();\r\n        this.http.timeout = 10000;\r\n    }\r\n    sendMassage(data, callback) {\r\n        this.emit(data, callback, true);\r\n    }\r\n    login(data, callback) {\r\n        this.emit(data, callback, false);\r\n    }\r\n    emit(data, callback, need) {\r\n        this.once(Laya.Event.COMPLETE, this, (e) => {\r\n            this.offAll();\r\n            if (e.code == Success) {\r\n                if (callback)\r\n                    callback(e.data);\r\n            }\r\n            else {\r\n                throw new Error(e);\r\n            }\r\n        });\r\n        this.once(Laya.Event.ERROR, this, (e) => {\r\n            this.offAll();\r\n        });\r\n        let headers = [\"Content-Type\", \"application/json\", \"sessionId\"];\r\n        if (need)\r\n            headers.push(SessionId);\r\n        let msg = JSON.stringify(data);\r\n        this.send(URL + data.url, msg, RES_TYPE.POST, METHOD_TYPE.JSON, headers);\r\n    }\r\n}\r\n",
  "references": []
}
